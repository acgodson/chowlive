/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Client {
  export type EVMTokenAmountStruct = { token: string; amount: BigNumberish };

  export type EVMTokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type Any2EVMMessageStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    sender: BytesLike;
    data: BytesLike;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    string,
    BigNumber,
    string,
    string,
    Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: BigNumber;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export interface ChowlivePaymentReceiverInterface extends utils.Interface {
  functions: {
    "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": FunctionFragment;
    "chowliveRoomContract()": FunctionFragment;
    "getRouter()": FunctionFragment;
    "owner()": FunctionFragment;
    "receivePayment(address,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "subscriptionToken()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "teleporter()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAddresses(address)": FunctionFragment;
    "withdrawTokens()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ccipReceive"
      | "chowliveRoomContract"
      | "getRouter"
      | "owner"
      | "receivePayment"
      | "renounceOwnership"
      | "subscriptionToken"
      | "supportsInterface"
      | "teleporter"
      | "transferOwnership"
      | "updateAddresses"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ccipReceive",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "chowliveRoomContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivePayment",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "teleporter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ccipReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chowliveRoomContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teleporter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "CrossChainPaymentReceived(uint64,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentReceived(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrossChainPaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
}

export interface CrossChainPaymentReceivedEventObject {
  sourceChainSelector: BigNumber;
  user: string;
  roomId: BigNumber;
  amount: BigNumber;
}
export type CrossChainPaymentReceivedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  CrossChainPaymentReceivedEventObject
>;

export type CrossChainPaymentReceivedEventFilter =
  TypedEventFilter<CrossChainPaymentReceivedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentReceivedEventObject {
  user: string;
  roomId: BigNumber;
  amount: BigNumber;
}
export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PaymentReceivedEventObject
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export interface ChowlivePaymentReceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChowlivePaymentReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ccipReceive(
      message: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    chowliveRoomContract(overrides?: CallOverrides): Promise<[string]>;

    getRouter(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    receivePayment(
      user: string,
      roomId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subscriptionToken(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    teleporter(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAddresses(
      _chowliveRoomContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ccipReceive(
    message: Client.Any2EVMMessageStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  chowliveRoomContract(overrides?: CallOverrides): Promise<string>;

  getRouter(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  receivePayment(
    user: string,
    roomId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subscriptionToken(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  teleporter(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAddresses(
    _chowliveRoomContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ccipReceive(
      message: Client.Any2EVMMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    chowliveRoomContract(overrides?: CallOverrides): Promise<string>;

    getRouter(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    receivePayment(
      user: string,
      roomId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    subscriptionToken(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    teleporter(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAddresses(
      _chowliveRoomContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CrossChainPaymentReceived(uint64,address,uint256,uint256)"(
      sourceChainSelector?: null,
      user?: null,
      roomId?: null,
      amount?: null
    ): CrossChainPaymentReceivedEventFilter;
    CrossChainPaymentReceived(
      sourceChainSelector?: null,
      user?: null,
      roomId?: null,
      amount?: null
    ): CrossChainPaymentReceivedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PaymentReceived(address,uint256,uint256)"(
      user?: null,
      roomId?: null,
      amount?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(
      user?: null,
      roomId?: null,
      amount?: null
    ): PaymentReceivedEventFilter;
  };

  estimateGas: {
    ccipReceive(
      message: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    chowliveRoomContract(overrides?: CallOverrides): Promise<BigNumber>;

    getRouter(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    receivePayment(
      user: string,
      roomId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subscriptionToken(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    teleporter(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAddresses(
      _chowliveRoomContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawTokens(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ccipReceive(
      message: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    chowliveRoomContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivePayment(
      user: string,
      roomId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subscriptionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    teleporter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAddresses(
      _chowliveRoomContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
