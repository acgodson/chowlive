/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ChowliveRoom {
  export type RoomStruct = {
    id: BigNumberish;
    subscriptionFee: BigNumberish;
    subscriptionToken: string;
    isPublic: boolean;
  };

  export type RoomStructOutput = [BigNumber, BigNumber, string, boolean] & {
    id: BigNumber;
    subscriptionFee: BigNumber;
    subscriptionToken: string;
    isPublic: boolean;
  };
}

export interface ChowliveRoomInterface extends utils.Interface {
  functions: {
    "SUBSCRIPTION_PERIOD()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cancelSubscription(uint256)": FunctionFragment;
    "createRoom(bool,uint256,address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getRoomDetails(uint256)": FunctionFragment;
    "getUserActiveSubscriptions(address)": FunctionFragment;
    "getUserSubscribedRooms(address)": FunctionFragment;
    "hasAccess(address,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lastRoomID()": FunctionFragment;
    "messenger()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "paymentReceiverContract()": FunctionFragment;
    "receiveTeleporterMessage(bytes32,address,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roomCreationFee()": FunctionFragment;
    "roomExists(uint256)": FunctionFragment;
    "rooms(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setPaymentReceiverContract(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRoomCreationFee(uint256)": FunctionFragment;
    "userSubscriptions(address,uint256)": FunctionFragment;
    "withdrawPEARL()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SUBSCRIPTION_PERIOD"
      | "approve"
      | "balanceOf"
      | "cancelSubscription"
      | "createRoom"
      | "getApproved"
      | "getRoomDetails"
      | "getUserActiveSubscriptions"
      | "getUserSubscribedRooms"
      | "hasAccess"
      | "isApprovedForAll"
      | "lastRoomID"
      | "messenger"
      | "name"
      | "owner"
      | "ownerOf"
      | "paymentReceiverContract"
      | "receiveTeleporterMessage"
      | "renounceOwnership"
      | "roomCreationFee"
      | "roomExists"
      | "rooms"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setPaymentReceiverContract"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "updateRoomCreationFee"
      | "userSubscriptions"
      | "withdrawPEARL"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRoom",
    values: [boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoomDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActiveSubscriptions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscribedRooms",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRoomID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentReceiverContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveTeleporterMessage",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roomCreationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roomExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rooms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentReceiverContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoomCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userSubscriptions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPEARL",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRoom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoomDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserActiveSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscribedRooms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastRoomID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentReceiverContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveTeleporterMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roomCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roomExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rooms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentReceiverContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoomCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPEARL",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoomCreated(uint256,address,bool)": EventFragment;
    "SubscriptionCancelled(address,uint256)": EventFragment;
    "SubscriptionUpdated(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoomCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoomCreatedEventObject {
  roomId: BigNumber;
  creator: string;
  isPublic: boolean;
}
export type RoomCreatedEvent = TypedEvent<
  [BigNumber, string, boolean],
  RoomCreatedEventObject
>;

export type RoomCreatedEventFilter = TypedEventFilter<RoomCreatedEvent>;

export interface SubscriptionCancelledEventObject {
  user: string;
  roomId: BigNumber;
}
export type SubscriptionCancelledEvent = TypedEvent<
  [string, BigNumber],
  SubscriptionCancelledEventObject
>;

export type SubscriptionCancelledEventFilter =
  TypedEventFilter<SubscriptionCancelledEvent>;

export interface SubscriptionUpdatedEventObject {
  user: string;
  roomId: BigNumber;
  expirationTimestamp: BigNumber;
}
export type SubscriptionUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SubscriptionUpdatedEventObject
>;

export type SubscriptionUpdatedEventFilter =
  TypedEventFilter<SubscriptionUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ChowliveRoom extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChowliveRoomInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SUBSCRIPTION_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelSubscription(
      roomId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createRoom(
      isPublic: boolean,
      subscriptionFee: BigNumberish,
      subscriptionToken: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoomDetails(
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ChowliveRoom.RoomStructOutput]>;

    getUserActiveSubscriptions(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserSubscribedRooms(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    hasAccess(
      user: string,
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastRoomID(overrides?: CallOverrides): Promise<[BigNumber]>;

    messenger(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    paymentReceiverContract(overrides?: CallOverrides): Promise<[string]>;

    receiveTeleporterMessage(
      arg0: BytesLike,
      arg1: string,
      message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    roomCreationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    roomExists(
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rooms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        id: BigNumber;
        subscriptionFee: BigNumber;
        subscriptionToken: string;
        isPublic: boolean;
      }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPaymentReceiverContract(
      _paymentReceiverContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRoomCreationFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userSubscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawPEARL(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  SUBSCRIPTION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelSubscription(
    roomId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createRoom(
    isPublic: boolean,
    subscriptionFee: BigNumberish,
    subscriptionToken: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoomDetails(
    roomId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ChowliveRoom.RoomStructOutput>;

  getUserActiveSubscriptions(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserSubscribedRooms(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  hasAccess(
    user: string,
    roomId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastRoomID(overrides?: CallOverrides): Promise<BigNumber>;

  messenger(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  paymentReceiverContract(overrides?: CallOverrides): Promise<string>;

  receiveTeleporterMessage(
    arg0: BytesLike,
    arg1: string,
    message: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  roomCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

  roomExists(roomId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  rooms(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      id: BigNumber;
      subscriptionFee: BigNumber;
      subscriptionToken: string;
      isPublic: boolean;
    }
  >;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPaymentReceiverContract(
    _paymentReceiverContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRoomCreationFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userSubscriptions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawPEARL(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    SUBSCRIPTION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelSubscription(
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createRoom(
      isPublic: boolean,
      subscriptionFee: BigNumberish,
      subscriptionToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoomDetails(
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ChowliveRoom.RoomStructOutput>;

    getUserActiveSubscriptions(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserSubscribedRooms(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    hasAccess(
      user: string,
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastRoomID(overrides?: CallOverrides): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    paymentReceiverContract(overrides?: CallOverrides): Promise<string>;

    receiveTeleporterMessage(
      arg0: BytesLike,
      arg1: string,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roomCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    roomExists(
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rooms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        id: BigNumber;
        subscriptionFee: BigNumber;
        subscriptionToken: string;
        isPublic: boolean;
      }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentReceiverContract(
      _paymentReceiverContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRoomCreationFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userSubscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawPEARL(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoomCreated(uint256,address,bool)"(
      roomId?: BigNumberish | null,
      creator?: string | null,
      isPublic?: null
    ): RoomCreatedEventFilter;
    RoomCreated(
      roomId?: BigNumberish | null,
      creator?: string | null,
      isPublic?: null
    ): RoomCreatedEventFilter;

    "SubscriptionCancelled(address,uint256)"(
      user?: string | null,
      roomId?: BigNumberish | null
    ): SubscriptionCancelledEventFilter;
    SubscriptionCancelled(
      user?: string | null,
      roomId?: BigNumberish | null
    ): SubscriptionCancelledEventFilter;

    "SubscriptionUpdated(address,uint256,uint256)"(
      user?: string | null,
      roomId?: BigNumberish | null,
      expirationTimestamp?: null
    ): SubscriptionUpdatedEventFilter;
    SubscriptionUpdated(
      user?: string | null,
      roomId?: BigNumberish | null,
      expirationTimestamp?: null
    ): SubscriptionUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    SUBSCRIPTION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelSubscription(
      roomId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createRoom(
      isPublic: boolean,
      subscriptionFee: BigNumberish,
      subscriptionToken: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoomDetails(
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserActiveSubscriptions(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSubscribedRooms(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccess(
      user: string,
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRoomID(overrides?: CallOverrides): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentReceiverContract(overrides?: CallOverrides): Promise<BigNumber>;

    receiveTeleporterMessage(
      arg0: BytesLike,
      arg1: string,
      message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    roomCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    roomExists(
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rooms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPaymentReceiverContract(
      _paymentReceiverContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRoomCreationFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userSubscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawPEARL(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SUBSCRIPTION_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSubscription(
      roomId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createRoom(
      isPublic: boolean,
      subscriptionFee: BigNumberish,
      subscriptionToken: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoomDetails(
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserActiveSubscriptions(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSubscribedRooms(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccess(
      user: string,
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRoomID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentReceiverContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveTeleporterMessage(
      arg0: BytesLike,
      arg1: string,
      message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    roomCreationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roomExists(
      roomId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rooms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPaymentReceiverContract(
      _paymentReceiverContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRoomCreationFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userSubscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawPEARL(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
